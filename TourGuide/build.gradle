// common build.gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

def springApps = subprojects.findAll() { project -> project.name != "common" }
configure(springApps) {

    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        }
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'war'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "jacoco"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly "org.springframework.boot:spring-boot-configuration-processor"
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-actuator'

        testCompile 'junit:junit'
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.6.RELEASE'
        testCompile 'org.assertj:assertj-core:3.17.2'
        testCompile 'org.apache.commons:commons-lang3:3.11'

    }

    jacoco {
        toolVersion = "0.8.4"
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    check.dependsOn jacocoTestCoverageVerification

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.5
                }
            }
        }
    }

    test {
        exclude '/tourGuide/integration/**'
        include '/tourGuide/unit/**'
    }

    task itest (type:Test) {
        testClassesDirs = project.sourceSets.test.output.classesDirs
        classpath = project.sourceSets.test.runtimeClasspath
        exclude '/tourGuide/unit/**'
        include '/tourGuide/integration/**'
    }

    test.finalizedBy jacocoTestReport
    itest.finalizedBy jacocoTestReport

}